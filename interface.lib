################################################################
#
#   Interface Library
#
################################################################

# ghostAPT Codex
# Table of Contents
# 1. Terminal Interface
# 2. Terminal Colors
# 3. GUI Menus

################################################################
#
#   1. Terminal Interface
#
################################################################

# ACSII/Unicode image/logo header
header (){

  topheader (){

  # The multi-line image
  centertheselines=(
  ""
  "  ▌     ▗ ▄▖▄▖▄▖"
  "▛▌▛▌▛▌▛▘▜▘▌▌▙▌▐ "
  "▙▌▌▌▙▌▄▌▐▖▛▌▌ ▐ "
  "▄▌              "
  )

  # Get the terminal width
  term_width=$(tput cols)

  # Function to center a line
  center_line() {
    local line="$1"
    local line_length=${#line}
    local padding=$(( (term_width - line_length) / 2 ))
    printf "%${padding}s%s%${padding}s\n" "" "$line" ""
  }

  # Center each line of the image
  for line in "${centertheselines[@]}"; do
    center_line "$line"
  done

  }

  logo1 (){
  # The multi-line image
  logotitle=(
  "               "
  "               "
  "⠀⠀⠀⠀⢠⣴⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⢰⣿⣿⣿⡿⠁⣈⣻⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⢘⡏⢉⣻⣧⠾⢿⣿⣿⣧⡀⣤⣴⢦⣀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠰⣿⣿⡏⠀⣀⣀⣿⣿⣿⣷⣦⣈⡲⠤⠄⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⢹⣻⣷⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻⠷⠄⠀⠀"
  "⠀⠀⠀⠀⠀⠑⠻⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣤⣯⠤⠖⠛⠁⠀"
  "⠀⠀⠀⠀⠸⠱⠄⠈⠘⠿⠿⣿⣿⣿⣻⣿⣟⡉⡉⠡⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  )

  # Get the terminal width
  term_width=$(tput cols)

  # Function to center a line
  center_line() {
    local line="$1"
    local line_length=${#line}
    local padding=$(( (term_width - line_length) / 2 ))
    printf "%${padding}s%s%${padding}s\n" "" "$line" ""
  }

  # Center each line of the image
  for line in "${logotitle[@]}"; do
    center_line "$line"
  done

  }

  bottomheader (){

  # The multi-line image
  centertheselines=(
  " _______  _____  __   _ _______ _____  ______"
  " |       |     | | \  | |______   |   |  ____"
  " |_____  |_____| |  \_| |       __|__ |_____|"
  ""
  )

  # Get the terminal width
  term_width=$(tput cols)

  # Function to center a line
  center_line() {
    local line="$1"
    local line_length=${#line}
    local padding=$(( (term_width - line_length) / 2 ))
    printf "%${padding}s%s%${padding}s\n" "" "$line" ""
  }

  # Center each line of the image
  for line in "${centertheselines[@]}"; do
    center_line "$line"
  done

  }

  logo1 ; topheader ; version #bottomheader

}

header-installer (){

  topheader (){

  # The multi-line image
  centertheselines=(
  "  ▌     ▗ ▄▖▄▖▄▖  ▄▖    ▗   ▜ ▜   ▗ ▘      ▖  ▖            "
  "▛▌▛▌▛▌▛▘▜▘▌▌▙▌▐   ▐ ▛▌▛▘▜▘▀▌▐ ▐ ▀▌▜▘▌▛▌▛▌  ▛▖▞▌▀▌▛▌▀▌▛▌█▌▛▘"
  "▙▌▌▌▙▌▄▌▐▖▛▌▌ ▐   ▟▖▌▌▄▌▐▖█▌▐▖▐▖█▌▐▖▌▙▌▌▌  ▌▝ ▌█▌▌▌█▌▙▌▙▖▌ "
  "▄▌                                                   ▄▌    "

  )

  # Get the terminal width
  term_width=$(tput cols)

  # Function to center a line
  center_line() {
    local line="$1"
    local line_length=${#line}
    local padding=$(( (term_width - line_length) / 2 ))
    printf "%${padding}s%s%${padding}s\n" "" "$line" ""
  }

  # Center each line of the image
  for line in "${centertheselines[@]}"; do
    center_line "$line"
  done

  }

  logo1 (){
  # The multi-line image
  logotitle=(
  ""
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡴⢻⣿⣿⣿⣿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⢸⣿⡦⠀⣸⣀⣼⣧⠀⢹⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠈⢻⣿⠀⣿⣿⠀⣿⣶⣿⣿⣿⣿⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠙⣠⣭⣝⣿⣿⣿⣿⣿⣿⣿⣿⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⡟⡤⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣳⠌⠑⠩⠐⠁⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⡿⣿⣟⣿⡻⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⡙⢻⣿⣿⣿⣿⣟⣷⢻⡞⣷⠳⣝⠧⡄⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⢿⣳⠿⣜⢫⠙⢮⡛⣦⠙⠈⠣⢀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢉⠿⣝⣻⢎⡅⢢⠀⠙⢦⡛⢤⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠮⡱⢋⡘⠄⠀⠀⠀⠘⠢⠍⡄⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠁⠀⠀⠈⠀⠀⠀⠀⠀⠈⠁⠄⠀⠀"
  ""
  )

  # Get the terminal width
  term_width=$(tput cols)

  # Function to center a line
  center_line() {
    local line="$1"
    local line_length=${#line}
    local padding=$(( (term_width - line_length) / 2 ))
    printf "%${padding}s%s%${padding}s\n" "" "$line" ""
  }

  # Center each line of the image
  for line in "${logotitle[@]}"; do
    center_line "$line"
  done

  }

  bottomheader (){

  # The multi-line image
  centertheselines=(
  "▄▖    ▗   ▜ ▜     "
  "▐ ▛▌▛▘▜▘▀▌▐ ▐ █▌▛▘"
  "▟▖▌▌▄▌▐▖█▌▐▖▐▖▙▖▌ "

  ""
  )

  # Get the terminal width
  term_width=$(tput cols)

  # Function to center a line
  center_line() {
    local line="$1"
    local line_length=${#line}
    local padding=$(( (term_width - line_length) / 2 ))
    printf "%${padding}s%s%${padding}s\n" "" "$line" ""
  }

  # Center each line of the image
  for line in "${centertheselines[@]}"; do
    center_line "$line"
  done

  }

  logo1 ; topheader ; version #bottomheader

}

header-script (){

  topheader (){

  # The multi-line image
  centertheselines=(
  ""
  "  ▌     ▗ ▄▖▄▖▄▖  ▄▖    ▘  ▗ "
  "▛▌▛▌▛▌▛▘▜▘▌▌▙▌▐   ▚ ▛▘▛▘▌▛▌▜▘"
  "▙▌▌▌▙▌▄▌▐▖▛▌▌ ▐   ▄▌▙▖▌ ▌▙▌▐▖"
  "▄▌                       ▌   "
  )

  # Get the terminal width
  term_width=$(tput cols)

  # Function to center a line
  center_line() {
    local line="$1"
    local line_length=${#line}
    local padding=$(( (term_width - line_length) / 2 ))
    printf "%${padding}s%s%${padding}s\n" "" "$line" ""
  }

  # Center each line of the image
  for line in "${centertheselines[@]}"; do
    center_line "$line"
  done

  }

  logo1 (){
  # The multi-line image
  logotitle=(
  ""
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣤⣤⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⠟⢻⣿⡟⠹⣿⣶⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣧⣀⣸⣿⣇⣀⣽⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⡟⢿⣿⡿⢛⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⡦⢤⣴⣿⣿⣿⣿⣦⣄⣀⣀⡀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣌⢻⣿⣿⣿⣿⣿⣿⠟⣰⠿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⣿⣿⡟⠋⠀⠀⠀⠀⢠⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⠠⠄⠿⠄⠀⠤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⠠⣴⣤⠀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⡠⠄⠁⣀⣀⣉⡉⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠛⠉⠁⠐⣁⣴⣶⣿⣿⣿⣿⣿⠀⠀⠈⡀⢶⣿⣷⣦⣄⡀⠂⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣤⣄⢠⡀⢀⡉⠉⢉⠉⠛⠛⠀⠀⠀⠀⠈⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⠈⡄⢸⡇⠀⣸⣿⠋⠀⠀⠀⠻⣿⣿⣿⡇⠄⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⣿⣿⣿⣿⣿⣿⡿⠛⠀⠀⠈⠀⣿⣾⡇⠀⣿⠏⡀⠀⡀⢀⣙⢿⣿⣿⡇⢀⢀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⢸⣿⡿⠁⠉⠻⠿⣿⣿⣿⣿⣿⣿⣿⠟⠉⠀⠙⠛⠉⣿⣿⠏⠀⠀⠀⠀⠀⠀⣿⠻⣇⠀⣏⣼⣿⣷⡇⣾⣿⡌⣿⣿⡇⢼⠈⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠿⡿⠉⠹⠿⠃⠀⠀⠀⠀⠀⠀⠀⠙⠁⠀⠀⠀⠀⠀⠀⠀⣿⣾⡟⠛⣿⢿⣿⡇⠃⣼⣿⡇⣿⣿⡇⢸⢰⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡟⢻⠇⠀⠛⢸⣿⡇⠀⣿⣿⡇⠿⠿⠇⠸⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠃⠀⠀⣀⣶⡈⠉⠡⠀⠈⢀⠐⢢⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⢤⣤⣀⣐⡒⠲⠤⢭⣉⠓⠀⠈⠉⠁⠀⠀⣀⣀⣠⣤⡀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⠉⠉⠛⠛⠛⠷⠶⡶⡀⢠⡶⠾⠿⠛⠋⠉⠉⠁⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⢀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  )

  # Get the terminal width
  term_width=$(tput cols)

  # Function to center a line
  center_line() {
    local line="$1"
    local line_length=${#line}
    local padding=$(( (term_width - line_length) / 2 ))
    printf "%${padding}s%s%${padding}s\n" "" "$line" ""
  }

  # Center each line of the image
  for line in "${logotitle[@]}"; do
    center_line "$line"
  done

  }

  # ACSII/Unicode image/logo header
  logo2 (){

  # The multi-line image
  logotitle=(
  #""
  #""
  "                   ##########-----------               "
  "               ##########+------------------           "
  "            ###########+--###------+##+------          "
  "          ############+--+####----+####--------        "
  "        #############+----###------+##---------        "
  "       ##############+-------------------------#       "
  "      ###############+-------------------------##      "
  "     ##########++------------------------------###     "
  "     #######+----------------------------------###     "
  "     #####+---###+---+#+-----------------------###     "
  "     #####----+##+----##+-----------------------##     "
  "     ####+---------------------------------------#     "
  "     ####+----------------------------------------     "
  "      ###+-------------------+###+++-------------      "
  "       ##+------------------+###################       "
  "        +------------------####################        "
  "          ---------------####################          "
  "            ---------+#####################            "
  "               #########################               "
  "                   #################                   "
  )

  # Get the terminal width
  term_width=$(tput cols)

  # Function to center a line
  center_line() {
    local line="$1"
    local line_length=${#line}
    local padding=$(( (term_width - line_length) / 2 ))
    printf "%${padding}s%s%${padding}s\n" "" "$line" ""
  }

  # Center each line of the image
  for line in "${logotitle[@]}"; do
    center_line "$line"
  done

  }

  bottomheader (){

  # The multi-line image
  centertheselines=(
" _______ _______  ______ _____  _____  _______"
" |______ |       |_____/   |   |_____]    |   "
" ______| |_____  |    \_ __|__ |          |   "
""
  )

  # Get the terminal width
  term_width=$(tput cols)

  # Function to center a line
  center_line() {
    local line="$1"
    local line_length=${#line}
    local padding=$(( (term_width - line_length) / 2 ))
    printf "%${padding}s%s%${padding}s\n" "" "$line" ""
  }

  # Center each line of the image
  for line in "${centertheselines[@]}"; do
    center_line "$line"
  done

  }

  logo1 ; topheader ; sleep 1 ; #bottomheader #; version

}

jcore92credits () {

logo (){
  # The multi-line image
  logotitle=(
  #"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣔⣀⣄⣶⠟⢲⣶⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠴⣶⣶⣶⣶⡀⢀⠆⠰⡏⣿⠟⢀⣶⡿⢁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣤⣤⣼⣿⣿⣿⣿⢻⠃⠈⣾⣷⣤⡃⠀⣘⣩⣴⠸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣏⡄⢠⠘⠻⠿⣿⣿⣿⣿⣿⣿⣇⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⡿⢿⣿⡿⡿⠷⠀⣄⡀⠀⠀⣿⠁⠀⠀⠈⢡⠖⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠙⠛⠛⠀⣄⡀⠀⠘⣲⠶⠿⣿⣷⣴⣤⠄⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⣠⡆⣶⡟⣠⡄⠀⠻⣧⣄⣐⣨⢭⠖⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⢶⡘⠄⢿⣇⠸⠆⠻⠅⣤⠀⣘⠲⠶⠋⠀⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⣿⣮⢳⡄⠛⠋⠁⢰⡇⢀⡁⢠⢿⣿⠇⠀⣐⠈⡉⢠⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡾⠿⠋⠋⠀⠀⠀⠀⠀⠀⢀⣿⡯⢸⠟⠁⠘⠂⠘⠈⠃⡘⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⠟⢦⣀⠀⢀⠄⠒⠀⠀⠀⠈⠉⠀⠀⠀⠀⠀⣠⣄⢲⡀⢳⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠶⠶⠟⡀⢠⠀⠀⠀⠀⠀⠀⠀⠀⠀⢐⣴⠀⠹⣜⣦⠛⡛⣶⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠛⠋⠉⠀⠈⡀⠀⠀⠀⠆⣰⡆⣤⢰⣶⣅⣘⡗⠀⠁⠈⠻⢟⣛⠔⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠑⠂⢀⠀⣬⢇⡉⡘⠻⠆⣿⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⢀⡀⣸⠟⢼⢧⣿⣧⢠⣄⢠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠃⣿⡇⡆⣼⣿⠟⣞⡋⢀⠰⠶⠶⠶⠶⠶⠶⠶⠦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  #"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⣀⠀⠀⠁⠙⠛⣀⣉⠋⠈⠂⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  #"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⡿⠃⠘⢿⣿⣾⣯⣥⡀⠀⢸⡇⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  #"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⡟⠁⠀⠀⠀⠙⣿⣿⣿⣧⠄⢸⠀⠀⠀⠠⢸⡂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"
  #"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⠯⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⢠⢠⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣐⣒⣒⣲⣶⣶⠂"
  #"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⠇⠀⠀⣠⣿⣟⡃⠀⢸⣿⣿⣿⠘⠘⠀⡀⢠⠀⠀⠶⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  #"⠀⠀⠀⠀⠀⠀⠀⠀⠠⠞⠛⠂⠀⣸⣿⠛⠀⢀⣾⣿⣿⣿⣿⠀⣸⣿⣿⣿⠀⠀⢸⣿⣿⡆⢥⢈⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  ""
  ""
  )

  # Get the terminal width
  term_width=$(tput cols)

  # Function to center a line
  center_line() {
    local line="$1"
    local line_length=${#line}
    local padding=$(( (term_width - line_length) / 2 ))
    printf "%${padding}s%s%${padding}s\n" "" "$line" ""
  }

  # Center each line of the image
  for line in "${logotitle[@]}"; do
    center_line "$line"
  done

  }

  logo

}

version (){

  # The multi-line image
  centertheselines=(
  ""
  "Version $version 👻 $builddate"
  #""
  )

  # Get the terminal width
  term_width=$(tput cols)

  # Function to center a line
  center_line() {
    local line="$1"
    local line_length=${#line}
    local padding=$(( (term_width - line_length) / 2 ))
    printf "%${padding}s%s%${padding}s\n" "" "$line" ""
  }

  # Center each line of the image
  for line in "${centertheselines[@]}"; do
    center_line "$line"
  done

}

# Terminal divider
divider (){
  echo ""
  printf -- ".%.0s" $(seq $(tput cols))
  echo ""
}

# Centers terminal text
center() {
  local width
  width="${COLUMNS:-$(tput cols)}"
  while IFS= read -r line; do
    # Strip color codes to get the actual text length
    local stripped_line=$(echo "$line" | sed 's/\x1b\[[0-9;]*m//g')
    local actual_length=${#stripped_line}

    if (( actual_length == width )); then
      printf '%s\n' "$line"
      continue
    fi

    if (( actual_length > width )); then
      while read -r subline; do
        local stripped_subline=$(echo "$subline" | sed 's/\x1b\[[0-9;]*m//g')
        local subline_length=${#stripped_subline}

        if (( subline_length == width )); then
          printf '%s\n' "$subline"
          continue
        fi
        printf '%*s\n' $(( (subline_length + width) / 2 )) "$subline"
      done < <(fold -w "$width" <<< "$line")
      continue
    fi

    printf '%*s\n' $(( (actual_length + width) / 2 )) "$line"
  done < "${1:-/dev/stdin}"
}

# Displays a prompt to press enter
entertocontinue (){

  entertocontinue=(
  ""
  "Press enter to continue"
  )

  # Get the terminal width
  term_width=$(tput cols)

  # Function to center a line
  center_line() {
    local line="$1"
    local line_length=${#line}
    local padding=$(( (term_width - line_length) / 2 ))
    printf "%${padding}s%s%${padding}s\n" "" "$line" ""
  }

  # Center each line of the image
  for line in "${entertocontinue[@]}"; do
    center_line "$line"
  done

  read -p ""

}

################################################################
#
#   2. Terminal Colors
#
################################################################
print_red() {
  while IFS= read -r line; do
    # Calculate the length of the original line
    local original_length=${#line}
    # Print the line in red, ensuring the length is preserved
    printf "\033[31m%s\033[0m\n" "$line"
  done
}

################################################################
#
#   3. GUI Menus
#
################################################################
systeminfogui () {

systeminfo

# System Information
hierarchy="1"

while [ "$hierarchy" == "1" ]; do clear && printf '\e[3J' ; if [ "$hierarchy" == "1" ]; then

selected_option=$(zenity --list --column="System Info" --height=560 --width=450 --window-icon="$programicon" --title="$progname" "${options[@]}")

case "$selected_option" in

"${options[0]}")

sysinfo-os

;;

"${options[1]}")

sysinfo-ram

;;

"${options[2]}")

sysinfo-processor

;;

"${options[3]}")

sysinfo-graphics

;;

"${options[4]}")

sysinfo-localip

;;

"${options[5]}")

sysinfo-publicip

;;

"${options[6]}")

sysinfo-copyall

;;

*) echo "Invalid option"

hidepublicipprobe
hierarchy="0"

;;
esac


fi
done

}
